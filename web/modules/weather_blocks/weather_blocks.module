<?php

use Drupal\weather_data\Service\SpatialUtility;

// This hook lets us alter the variables at the page level. These variables are
// available globally to all templates.
function weather_blocks_template_preprocess_default_variables_alter(
    &$variables,
    $hook,
) {
    // Let's create a single global that contains all of our stuff, rather than
    // scattering them around. Yay, namespaces!
    $weatherMetadata = [
        "alerts" => false,
        "place" => false,
        "point" => false,
    ];

    // First, get our route information.
    $container = \Drupal::getContainer();
    $route = $container->get("current_route_match");

    // We only need to populate globals if we're on a point route.
    if ($route->getRouteName() == "weather_routes.point") {
        $lat = $route->getParameter("lat");
        $lon = $route->getParameter("lon");
        $weatherMetadata["point"] = ["lat" => $lat, "lon" => $lon];

        $weatherData = $container->get("weather_data");

        try {
            $grid = $weatherData->getGridFromLatLon($lat, $lon);

            $weatherMetadata["grid"] = $grid;

            $alerts = $weatherData->getAlerts(
                $grid,
                SpatialUtility::pointArrayToObject([$lon, $lat]),
            );
            $weatherMetadata["alerts"] = count($alerts) > 0;
        } catch (Throwable $e) {
        }

        try {
            $place = $weatherData->getPlaceNearPoint($lat, $lon);
            if ($place) {
                $weatherMetadata["place"] = trim(
                    $place->city . ", " . $place->state,
                );
            }
        } catch (Throwable $e) {
        }
    }

    $variables["weather"] = $weatherMetadata;
}
